// <auto-generated />
using System;
using CBSMonitoring.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CBSMonitoring.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230908062002_AddNavigationPropToQualityImprovedEmployees")]
    partial class AddNavigationPropToQualityImprovedEmployees
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CBSMonitoring.Model.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FileModel", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<string>("BasePath")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DocDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocNumber")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SystemPath")
                        .HasColumnType("text");

                    b.HasKey("FileId");

                    b.ToTable("FileModels");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<int>("FormSectionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsListItem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemLabel")
                        .HasColumnType("text");

                    b.Property<string>("ItemName")
                        .HasColumnType("text");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ListIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ListLabel")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string[]>("SelectOptions")
                        .HasColumnType("text[]");

                    b.HasKey("ItemId");

                    b.HasIndex("FormSectionId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("FormItems");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormItemType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("FormItemTypes");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormSection", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SectionId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionBlockId")
                        .HasColumnType("integer");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectionNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SectionId");

                    b.HasIndex("QuestionBlockId");

                    b.HasIndex("SectionNumber")
                        .IsUnique();

                    b.ToTable("FormSections");
                });

            modelBuilder.Entity("CBSMonitoring.Models.OrgMonitoring", b =>
                {
                    b.Property<int>("MonitoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MonitoringId"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("QuarterIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SectionNumber")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("MonitoringId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrgMonitoringReports");

                    b.HasDiscriminator<string>("Discriminator").HasValue("OrgMonitoring");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CBSMonitoring.Models.QualificationImprovedEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificateFileId")
                        .HasColumnType("integer");

                    b.Property<string>("CourseConductedOrgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EducationPeriod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrgMonitoringId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CertificateFileId");

                    b.HasIndex("OrgMonitoringId");

                    b.ToTable("QIEmployees");
                });

            modelBuilder.Entity("CBSMonitoring.Models.QuestionBlock", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BlockId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlockNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("BlockId");

                    b.HasIndex("BlockNumber")
                        .IsUnique();

                    b.ToTable("QuestionBlocks");
                });

            modelBuilder.Entity("CBSMonitoring.Models.TimelyExecutionOfPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeadlineOfPlan")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Doers")
                        .HasColumnType("text");

                    b.Property<int>("OrgMonitoringId")
                        .HasColumnType("integer");

                    b.Property<string>("SectNameWithNumber")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrgMonitoringId");

                    b.ToTable("TimelyExecutionOfPlans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<int?>("File_1_1_1Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasPolicy")
                        .HasColumnType("boolean");

                    b.HasIndex("File_1_1_1Id");

                    b.HasDiscriminator().HasValue("Form1_1_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<int?>("File_1_1_2Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsReviewedByCBS")
                        .HasColumnType("boolean");

                    b.HasIndex("File_1_1_2Id");

                    b.HasDiscriminator().HasValue("Form1_1_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_3", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("AgreedWithAuthBody")
                        .HasColumnType("boolean");

                    b.Property<int?>("File_1_1_3Id")
                        .HasColumnType("integer");

                    b.HasIndex("File_1_1_3Id");

                    b.HasDiscriminator().HasValue("Form1_1_3");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_4", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("AreEmpsFamiliarWithISP")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<float?>("PercentageOfEmpFamiliarWithPolicy")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Form1_1_4");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_5", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsAuditConducted")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form1_1_5");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_6", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("HasISPRevised")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfRevision")
                        .HasColumnType("integer");

                    b.Property<int?>("YearOfRevisions")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form1_1_6");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_2_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("AreInternalRegulationsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("ListOfRegDocs")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfRegDocs")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form1_2_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_3_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("AreRegsAndRecordsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("ListOfRegAndRecords")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfRegAndRecords")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form1_3_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_4_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<DateTime?>("ConfidentialDocDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConfidentialDocNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("IsListOfConfInfoAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form1_4_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_4_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<DateTime?>("ComissionDocDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ComissionDocNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("IsComissionPresent")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form1_4_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_4_3", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsListOfOfficialAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OfficialsDocDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfficialsDocNumber")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form1_4_3");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_4_4", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsListOfConfInfoProvidedToEmps")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form1_4_4");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_5_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsAgreementOnPrivacyAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form1_5_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_5_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsRelevantClausesAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form1_5_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_5_3", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsEmployeesFamWithAgreements")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfEmplFamWithAgreements")
                        .HasColumnType("integer");

                    b.Property<float?>("PercentageOfEmpFamWithAgreements")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Form1_5_3");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_10_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<DateTime?>("AuditConcDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AuditPeriod")
                        .HasColumnType("text");

                    b.Property<string>("AuditedObjectsNames")
                        .HasColumnType("text");

                    b.Property<bool?>("IsObjectsAudited")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShortcomingDetected")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShortcomingsOfObjecttEliminated")
                        .HasColumnType("boolean");

                    b.Property<string>("NumberOfAuditConc")
                        .HasColumnType("text");

                    b.Property<string>("OrgNameMadeAudit")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_10_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsEntranceSecurityAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfObjWithSecurity")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsACSAvialble")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfObjInACS")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_3", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsCheckInOutLogAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfPointsInLog")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_3");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_4", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsSurveillanceCamerasAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfStructObjsWithCams")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfVideoCamsInCentre")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfVideoCamsInTerritorialObjs")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_4");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_5", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsSecAlarmsInCentreAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfRoomsMonitoredByAlarms")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfTerritObjsWithAlarms")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_5");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_6", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsAntiFireEquipAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCoolingSystemAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFalseFloorAndCeilingAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLogsForSRAndDCEntrance")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPlanForPreventiveMaintAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsServerRoomOrDataCenterAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTempSensorsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVideoCamAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfDataCentre")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfSRandDCWithMetalDoor")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfSRandDCWithWithSystemControl")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfServerRoom")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_6");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_11_7", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsSealedOuterCaseAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfServersWithSealedOuterCases")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfWStWithSealedOuterCases")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_11_7");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_12_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsAnyIncidentResoluted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDepISAndHeadNotified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsIncidentsInvestigated")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLogsForIncidentsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumOFIncidentsResoluted")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfIncidentsInStructOrg")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfIncidentsInSubObjects")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfIncidentsInvestigated")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfIncidents")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfObjWithIncidentLog")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_12_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_13_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("BackupFrequency")
                        .HasColumnType("text");

                    b.Property<bool?>("IsApprovedScheduleForBackupAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsBackupMeasuresProvided")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumOfConfidentialInfo")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfISBackupProvided")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfServersSoftRedundancyMeasured")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_13_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_14_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsSystemUpdateHold")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumOfServersWithLicensedOS")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfServersWithUpdatingOs")
                        .HasColumnType("integer");

                    b.Property<int?>("NumOfWRoomswihLicensedOS")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_14_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_15_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("FrequencyOfPrevMaintanence")
                        .HasColumnType("text");

                    b.Property<bool?>("IsPlannedPrevWorkAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form2_15_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_16_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsRecoveryPlansAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form2_16_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_17_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsAlternativePowerLAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFireAlarmSystAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsGasFireExtSystAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsGeneratorsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUPSAvailableForWRs")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUPSForSEqAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfGenerators")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfServersWithUPS")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfWRsWithUPS")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_17_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_18_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsLogsOfCarriersOfConfInfAvailable")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form2_18_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_1_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<int?>("File_2_1_1Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActionPlanAvailableToEnsIC")
                        .HasColumnType("boolean");

                    b.Property<string>("ReasonForAbsenceOfPlan")
                        .HasColumnType("text");

                    b.HasIndex("File_2_1_1Id");

                    b.HasDiscriminator().HasValue("Form2_1_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_2_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<int?>("File_2_2_1Id")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfDoneSects")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfDoneSectsInTime")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfSectsInActionPlan")
                        .HasColumnType("integer");

                    b.HasIndex("File_2_2_1Id");

                    b.HasDiscriminator().HasValue("Form2_2_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_2_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.HasDiscriminator().HasValue("Form2_2_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_3_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<int?>("File_2_3_1Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsListOfProtectedObjAvailable")
                        .HasColumnType("boolean");

                    b.HasIndex("File_2_3_1Id");

                    b.HasDiscriminator().HasValue("Form2_3_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_3_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<int?>("File_2_3_2Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsObjectsClassified")
                        .HasColumnType("boolean");

                    b.HasIndex("File_2_3_2Id");

                    b.HasDiscriminator().HasValue("Form2_3_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_3_3", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsISystemAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NamesOfISystems")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_3_3");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_3_4", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsISystemResourcesAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NamesOfSystemResources")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_3_4");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_4_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("ISsecDivisionName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsISecDivisionPresent")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Form2_4_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_4_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("EmailOfSectionHead")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDevisionPositionPresent")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfISEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumOfSectionHead")
                        .HasColumnType("text");

                    b.Property<string>("PositionOfSectionHead")
                        .HasColumnType("text");

                    b.Property<string>("SectionHeadFullName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_4_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_4_3", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<DateTime?>("ContractDateOfOutsoucingOrg")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ContractNumberOfOutsoucingOrg")
                        .HasColumnType("text");

                    b.Property<bool?>("IsOrganizationInvolvedInOutsourcingOfIS")
                        .HasColumnType("boolean");

                    b.Property<string>("ListOfServicesOfOutsourcingOrg")
                        .HasColumnType("text");

                    b.Property<string>("NameOfOutSourcingOrg")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_4_3");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_5_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("EmailOfRespPerson")
                        .HasColumnType("text");

                    b.Property<string>("FullNameOfRespPerSon")
                        .HasColumnType("text");

                    b.Property<bool?>("IsResponsiblePersonForISAssigned")
                        .HasColumnType("boolean");

                    b.Property<string>("PositionOfRespPerson")
                        .HasColumnType("text");

                    b.Property<string>("TelNumOfRespPerson")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_5_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_6_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("EmailOfRespPersonForSecIssues")
                        .HasColumnType("text");

                    b.Property<string>("FullNameOfRespPersonForSecIssues")
                        .HasColumnType("text");

                    b.Property<bool?>("IsRespPersonAvailableForSecIssues")
                        .HasColumnType("boolean");

                    b.Property<string>("PositionOfRespPersonForSecIssues")
                        .HasColumnType("text");

                    b.Property<string>("TelNumberOfRespPersonForSecIssues")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_6_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_7_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsInstructionPresent")
                        .HasColumnType("boolean");

                    b.Property<int?>("PositionInstructionCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_7_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_8_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsEmpsQualificationImproved")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfEmpsQualificaitonImproved")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form2_8_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_9_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<DateTime?>("ExpertConclusionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExpertConclusionNumber")
                        .HasColumnType("text");

                    b.Property<string>("ExpertizingPeriod")
                        .HasColumnType("text");

                    b.Property<bool?>("HasShortcomings")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShortcomingsOfWebsiteEliminated")
                        .HasColumnType("boolean");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form2_9_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_10_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsDLPAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLicenceOfDLPAvaliable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameAndVersionOfDLP")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfWorkRoomsWithDLP")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_10_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_11_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsLicenseForSIEMAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSIEMAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameAndVersionOfSIEM")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_11_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_12_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("CAToolType")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCAndAnalysisToolAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameAndVersionOfCAndSAnalysisTool")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfCAndSAnalysisTools")
                        .HasColumnType("text");

                    b.Property<string>("PurposeOfCAndSAnalysisTools")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_12_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_13_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsProtectionToolAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfProtectionTool")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfProtectionTool")
                        .HasColumnType("integer");

                    b.Property<string>("ProtectionToolType")
                        .HasColumnType("text");

                    b.Property<string>("PurposeOfProtectionTool")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_13_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_1_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("FrequencyOfPasswUpdateInWRs")
                        .HasColumnType("text");

                    b.Property<bool?>("IsPasswProtectInWRsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfWRsWithPasswProtection")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_1_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_1_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("FrequncyOfPasswUpdateInSRs")
                        .HasColumnType("text");

                    b.Property<bool?>("IsPasswProtectInSRsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfSRsWithPasswProtection")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_1_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_2_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsACToNetInCentreAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfToolForACInCentre")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_2_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_2_2", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsACToNetInStrucDivAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfToolsForACInStrucDiv")
                        .HasColumnType("text");

                    b.Property<int?>("NumOfOrgsWithACToNetInStrucDiv")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_2_2");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_3_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("FrequencyOfIDsChange")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAccessControlSystemAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAccessEventsAndLogsRecorded")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfACMTool")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfISWithACS")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfISWithConfInfUsingACS")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfISWithConfInfWithCryptKeys")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfISWithConfInfWithOnlyPassw")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfISWithCryptKeys")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfISWithOnlyPassw")
                        .HasColumnType("integer");

                    b.Property<string>("UserIDsInAccess")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_3_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_4_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsAnitivirusAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLicenseForAntivirusAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameAndVersionOfAntivirus")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfServersWithAntivirus")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfWRsWithAntivirus")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_4_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_5_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("FirewallType")
                        .HasColumnType("text");

                    b.Property<bool?>("IsFirewallAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLicenceForFireWallAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameAndVersionOfFirewall")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_5_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_6_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<string>("IDPSType")
                        .HasColumnType("text");

                    b.Property<bool?>("IsIDPSAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLicenseForIDPSAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("NameAndVersionOfIDPS")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_6_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_7_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsEXATAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfSystemsWithEXAT")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_7_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_8_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsHUMOAvailable")
                        .HasColumnType("boolean");

                    b.Property<int?>("NumberOfsystemsWithHUMO")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Form3_8_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form3_9_1", b =>
                {
                    b.HasBaseType("CBSMonitoring.Models.OrgMonitoring");

                    b.Property<bool?>("IsVPNUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("PurposeAndScopeOfVPNConnections")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Form3_9_1");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormItem", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FormSection", "FormSection")
                        .WithMany("FormItems")
                        .HasForeignKey("FormSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBSMonitoring.Models.FormItemType", "FormItemType")
                        .WithMany("FormItems")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormItemType");

                    b.Navigation("FormSection");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormSection", b =>
                {
                    b.HasOne("CBSMonitoring.Models.QuestionBlock", "QuestionBlock")
                        .WithMany("FormSections")
                        .HasForeignKey("QuestionBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBlock");
                });

            modelBuilder.Entity("CBSMonitoring.Models.OrgMonitoring", b =>
                {
                    b.HasOne("CBSMonitoring.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("CBSMonitoring.Models.QualificationImprovedEmployee", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBSMonitoring.Models.Forms.Form2_8_1", "OrgMonitoring")
                        .WithMany("QualificationImprovedEmployees")
                        .HasForeignKey("OrgMonitoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("OrgMonitoring");
                });

            modelBuilder.Entity("CBSMonitoring.Models.TimelyExecutionOfPlan", b =>
                {
                    b.HasOne("CBSMonitoring.Models.Forms.Form2_2_2", "OrgMonitoring")
                        .WithMany("TimelyExecutionOfPlans")
                        .HasForeignKey("OrgMonitoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrgMonitoring");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_1", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_1_1_1Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_2", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_1_1_2Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form1_1_3", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_1_1_3Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_1_1", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_2_1_1Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_2_1", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_2_2_1Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_3_1", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_2_3_1Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_3_2", b =>
                {
                    b.HasOne("CBSMonitoring.Models.FileModel", "FileModel")
                        .WithMany()
                        .HasForeignKey("File_2_3_2Id");

                    b.Navigation("FileModel");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormItemType", b =>
                {
                    b.Navigation("FormItems");
                });

            modelBuilder.Entity("CBSMonitoring.Models.FormSection", b =>
                {
                    b.Navigation("FormItems");
                });

            modelBuilder.Entity("CBSMonitoring.Models.QuestionBlock", b =>
                {
                    b.Navigation("FormSections");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_2_2", b =>
                {
                    b.Navigation("TimelyExecutionOfPlans");
                });

            modelBuilder.Entity("CBSMonitoring.Models.Forms.Form2_8_1", b =>
                {
                    b.Navigation("QualificationImprovedEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
